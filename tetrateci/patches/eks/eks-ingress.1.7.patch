diff --git a/pkg/test/framework/components/echo/kube/deployment.go b/pkg/test/framework/components/echo/kube/deployment.go
index eeb0f9bccf..e05af78053 100644
--- a/pkg/test/framework/components/echo/kube/deployment.go
+++ b/pkg/test/framework/components/echo/kube/deployment.go
@@ -19,6 +19,7 @@ import (
 	"net"
 	"strconv"
 	"text/template"
+	"time"
 
 	"github.com/Masterminds/sprig"
 
@@ -366,7 +367,7 @@ func generateYAMLWithSettings(cfg echo.Config, settings *image.Settings,
 			var err error
 			addr, err = istio.GetRemoteDiscoveryAddress("istio-system", cluster, s.Minikube)
 			return err
-		})
+		}, retry.Timeout(3*time.Minute), retry.Delay(5*time.Second))
 		if err != nil {
 			return "", "", err
 		}
diff --git a/pkg/test/framework/components/ingress/kube.go b/pkg/test/framework/components/ingress/kube.go
index 0531e26cf9..e3360f1981 100644
--- a/pkg/test/framework/components/ingress/kube.go
+++ b/pkg/test/framework/components/ingress/kube.go
@@ -115,6 +115,14 @@ func (c *kubeComponent) getAddressInner(ns string, port int) (interface{}, bool,
 	}
 
 	if len(svc.Status.LoadBalancer.Ingress) == 0 || svc.Status.LoadBalancer.Ingress[0].IP == "" {
+		if svc.Status.LoadBalancer.Ingress[0].IP == "" && svc.Status.LoadBalancer.Ingress[0].Hostname != "" {
+			ip, err := net.LookupIP(svc.Status.LoadBalancer.Ingress[0].Hostname)
+			if err != nil {
+				return nil, false, err
+			}
+			return net.TCPAddr{IP: ip[0], Port: port}, true, nil
+		}
+
 		return nil, false, fmt.Errorf("service ingress is not available yet: %s/%s", svc.Namespace, svc.Name)
 	}
 
diff --git a/pkg/test/framework/components/istio/util.go b/pkg/test/framework/components/istio/util.go
index 6ff9f57d0b..cf72e0a238 100644
--- a/pkg/test/framework/components/istio/util.go
+++ b/pkg/test/framework/components/istio/util.go
@@ -108,6 +108,13 @@ func GetRemoteDiscoveryAddress(namespace string, cluster resource.Cluster, useNo
 
 	// If running in KinD, MetalLB must be installed to enable LoadBalancer resources
 	if len(svc.Status.LoadBalancer.Ingress) == 0 || svc.Status.LoadBalancer.Ingress[0].IP == "" {
+		if svc.Status.LoadBalancer.Ingress[0].IP == "" && svc.Status.LoadBalancer.Ingress[0].Hostname != "" {
+			ip, err := net.LookupIP(svc.Status.LoadBalancer.Ingress[0].Hostname)
+			if err != nil {
+				return net.TCPAddr{}, err
+			}
+			return net.TCPAddr{IP: ip[0], Port: discoveryPort}, nil
+		}
 		return net.TCPAddr{}, fmt.Errorf("service ingress is not available yet: %s/%s", svc.Namespace, svc.Name)
 	}
 
